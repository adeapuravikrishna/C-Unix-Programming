25 25 25 15

radepu - a4

 1748 Mar 3 18:58 p1.c
  453 Mar 3 18:58 p2.c
  981 Mar 3 18:59 p3.c
  275 Mar 4 17:12 p4.sh


p1.c
---
> #include<stdio.h>
> #include<math.h>
> #include<time.h>
> #include<stdlib.h>
> #include<string.h>
> #define N 51	                        // number of points to generate
> #define pi 3.141592653589793

*** pi is more accurately defined as (4*atan(1))

> int first=0;
> double RandomGenrator(double min, double max) 
> {  if(first==0)
>    srand(time(NULL));
>    first++;                         //srand() called only once for randomized noise r
>    return rand() * (max - min) / RAND_MAX + min;
> }
> int main(int argc, char *argv[])
> {
> double i=0,phase,a1,a2,y;
> double noise;
> phase =RandomGenrator(0,2*pi);

*** supposed to be separate random phase for each sine wave

>     if( argc == 2 )
>    {
>      if(0 == strcmp("s",argv[1]))              //sum of two sine waves
>        {
>        while( i < N) // i will go from 0 to N-1
>        {
>         noise = RandomGenrator(-0.75,0.75);
>         a1=(2*pi*1100*(i/8000))+phase;
>         a2=(2*pi*1600*(i/8000))+phase;
>         y=sin(a1)+sin(a2)+noise;
>         printf("%g %g\n",i,y);
>         ++i;
>         }   
>     }
>      else if(0 ==strcmp("p",argv[1]))          //product of two sine waves
>      {
>        while( i < N) // i will go from 0 to N-1
>         {
>        noise = RandomGenrator(-0.75,0.75);
>        a1=(2*pi*1100*(i/8000))+phase;
>        a2=(2*pi*1600*(i/8000))+phase;
>        y=sin(a1)*sin(a2)+noise;
>        printf("%g %g\n",i,y);
>        ++i;
>         }
>      } 
>     else
>      printf("Enter p or s only\n");             // arguments other than p and s
>    }
>    else if( argc > 2 )
>    {
>       printf("Too many arguments supplied.\n");
>    }
>    else                                        // when no argument given
>    { 
>        while( i < N) // i will go from 0 to N-1
>         {
>        noise = RandomGenrator(-0.75,0.75);
>        a1=(2*pi*1100*(i/8000))+phase;
>        y=sin(a1)+noise;
>        printf("%g %g\n",i,y);
>        ++i;
>         }
>    }
>   return 0;
> }

Compile: gcc -std=c99 -pedantic -Wall -g -lm -o p1 p1.c


Run: ./p1 > p1.out
---

head -5 p1.out
---
0 1.08032
1 0.0895117
2 -0.125698
3 -1.26848
4 -0.363496

Run: plot < p1.out > p1.gif
---


p2.c
---
> // copy doubles from standard input to standard output
>  
> #include <stdio.h>
>  
> int main( void)
> {
>   int s; // scanf return status
>  
>   double y0,y1,y2,t,y,a;
>   y1=y2=0.0;
>  
>   while( 1) // until end-of-file or error
>   {
>     s = scanf("%lf %lf",&t,&y); // try to read one double

*** comment is wrong

>     if( s != 2) // could not read one double, must be end-of-file or error
>     break;
>     y0=y1; y1=y2; y2=y;
>     a=(y0+y1+y2)/3;
>     printf( "%g %g\n", t,a);
>   }
>  
>   return 0;
> }

Compile: gcc -std=c99 -pedantic -Wall -g -lm -o p2 p2.c


testdata.in
---
1 1
2 2
3 4
4 1

Run: ./p2 < testdata.in
---
1 0.333333
2 1
3 2.33333
4 2.33333

expected_p2.out
---
1 0.333333
2 1
3 2.33333
4 2.33333


p3.c
---
> #include<stdio.h>
> #include<math.h>
> int main( void)
> {
>   int s; // scanf return status
>  
>   double t,y;
>  
>  int i=0;
>  double t0,t1,t2,y0,y1,y2;
>         t1=t2=y1=y2=0;
>   while( 1) // until end-of-file or error
>   {
>      
>     s = scanf("%lf %lf",&t,&y); // try to read one double

*** comment is wrong

>     if( s != 2) // could not read one double, must be end-of-file or error
>     break;
> 	
>  printf( "%g %g\n", t,y);
>         
>         t0=t1; t1=t2; t2=t; y0=y1;y1=y2; y2=y;
> 	if(i > 1)
> 	{
> 		if((y1>y2)&&(y1>y0))
> 		{
>     double x0 = t0 - t1; 
>     double x2 = t2 - t1;
> 		
> 		double a= ( x2 *( y0 - y1 ) + x0* ( y1 - y2 ) ) / ( x0 * x2 * ( x0 - x2 ) );
> 		double b = (y0 - y1 - (a*pow(x0,2))) / x0 ;
> 		double x = (-b)/(2*a);
> 		double yp = (a*pow(x,2)) + (b* x) + y1;
> 		double tp = t1- (b/(2*a));
>                 printf("     \n");
>                 printf("%g %g\n",tp,0.0);
> 		printf( "%g %g\n", tp,1.5*yp);
>                 printf("     \n");
>                 printf( "%g %g\n", t,y);
> 		}
> 		
> 	}
> 	i++;
>   }
>  
>   return 0;
> }

Compile: gcc -std=c99 -pedantic -Wall -g -lm -o p3 p3.c


testdata.in
---
1 1
2 2
3 4
4 1

Run: ./p3 < testdata.in
---
1 1
2 2
3 4
4 1
     
2.9 0
2.9 6.0375
     
4 1

expected_p3.out
---
1 1
2 2
3 4
4 1

2.9 0
2.9 6.0375

4 1


p4.sh
---
> #! /bin/dash
> debug=""
> for x		# x loops through args $1, $2, ...
> do
>   # echo "x = $x"
>   case "$x" in
>     s) echo "`p1 s`";;
>     p) echo "`p1 p`";;
>     2) echo "`p1 | p2`";;
>     3) echo "` p1 | p2 | p3 `";;
>     d) echo "` p1 | p2 | dft 2 | p3 `";;

*** need to construct command string to run later
*** instead of running the programs immediately here

>     D) debug="1"

*** debug is supposed to echo the commands and not run them

>   esac
> done

Run: /bin/dash ./p4.sh D s 2 3
---
./p4.sh: 14: p1: not found

./p4.sh: 14: p1: not found
./p4.sh: 14: p2: not found

./p4.sh: 14: p1: not found
./p4.sh: 14: p2: not found
./p4.sh: 14: p3: not found

